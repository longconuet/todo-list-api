name: Build and Deploy .NET API with Docker

on:
  push:
    branches: [ "develop" ]

jobs:
  #############################
  # JOB 1: BUILD & TEST       #
  #############################
  build:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Sử dụng nếu chạy Unit Test
      - name: Set up .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore dependencies
        run: dotnet restore ./TodoListApi.csproj

      - name: Build application
        run: dotnet build ./TodoListApi.csproj --configuration Release --no-restore
      
      # (Tùy chọn) Thêm bước chạy Unit Test ở đây
      # - name: Run tests
      #   run: dotnet test --verbosity normal

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha # Bật cache đọc từ GitHub Actions
          cache-to: type=gha # Bật cache ghi lên GitHub Actions

  ####################################
  # JOB 2: DEPLOY TO PRODUCTION    #
  ####################################
  deploy:
    # Job này chỉ chạy sau khi job 'build' thành công
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml" # Tên file trong repo
          target: "${{ secrets.DOCKER_DEPLOY_PATH }}" # Thư mục đích trên VPS
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Di chuyển tới thư mục triển khai
            cd ${{ secrets.DOCKER_DEPLOY_PATH }}

            # Tái tạo lại tên image đầy đủ với tag là mã SHA của commit
            # Đây là cách đáng tin cậy nhất để đảm bảo deploy đúng phiên bản
            FULL_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest"

            echo "Deploying image: ${FULL_IMAGE_NAME}"
            
            # Ghi tên image từ job build vào file .env để docker-compose đọc
            echo "IMAGE_TAG=${FULL_IMAGE_NAME}" > .env

            # Đăng nhập vào Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Kéo image mới nhất và khởi động lại dịch vụ
            docker-compose pull
            docker-compose up -d --remove-orphans
