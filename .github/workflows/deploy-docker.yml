name: Build and Deploy .NET API with Docker

on:
  push:
    branches: [ "develop" ]
  # Cho phép trigger thủ công
  # workflow_dispatch:

# env:
#   IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

jobs:
  #############################
  # JOB 1: BUILD & TEST       #
  #############################
  build:
    runs-on: ubuntu-latest
    # outputs:
      # Xuất ra tên image để job sau sử dụng
      # image_name: ${{ steps.docker_meta.outputs.tags }}
      # full_image: ${{ steps.output_image.outputs.full_image }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Sử dụng nếu chạy Unit Test
      # - name: Set up .NET 9
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: '9.0.x'

      # - name: Restore dependencies
      #   run: dotnet restore

      # - name: Build application
      #   run: dotnet build --no-restore -c Release
      
      # (Tùy chọn) Thêm bước chạy Unit Test ở đây
      # - name: Run tests
      #   run: dotnet test --verbosity normal

      # - name: Set Docker image tag
      #   id: vars
      #   run: |
      #     TAG_DATE=$(date +'%Y%m%d%H%M%S')
      #     echo "TAG_DATE=$TAG_DATE" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: docker_meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
      #     # Tạo tag: latest và tag theo mã commit SHA
      #     tags: |
      #       type=raw,value=latest,enable={{is_default_branch}}
      #       type=sha

      # - name: Cache NuGet packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       ${{ runner.os }}-dotnet-

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          # tags: ${{ steps.docker_meta.outputs.tags }}
          # labels: ${{ steps.docker_meta.outputs.labels }}
          # cache-from: type=gha # Bật cache đọc từ GitHub Actions
          # cache-to: type=gha,mode=max # Bật cache ghi lên GitHub Actions

      # - name: Output image name for next job
      #   id: output_image
      #   run: echo "full_image=${IMAGE_NAME}:${TAG_DATE}" >> $GITHUB_OUTPUT

  ####################################
  # JOB 2: DEPLOY TO PRODUCTION    #
  ####################################
  deploy:
    # Job này chỉ chạy sau khi job 'build' thành công
    needs: build
    runs-on: ubuntu-latest
    
    # Thêm môi trường để có thể cấu hình phê duyệt thủ công trong Settings
    # environment:
    #   name: production
    #   url: https://todo-list-api-2.nhanvathucau.io.vn

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Show image name from build step
      #   run: |
      #     echo "Deploying image: ${{ needs.build.outputs.full_image }}"

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml" # Tên file trong repo
          target: "${{ secrets.DOCKER_DEPLOY_PATH }}" # Thư mục đích trên VPS
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Di chuyển tới thư mục triển khai
            # mkdir -p ${{ secrets.DOCKER_DEPLOY_PATH }}
            cd ${{ secrets.DOCKER_DEPLOY_PATH }}

            # Tái tạo lại tên image đầy đủ với tag là mã SHA của commit
            # Đây là cách đáng tin cậy nhất để đảm bảo deploy đúng phiên bản
            FULL_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}"

            echo "Deploying image: ${FULL_IMAGE_NAME}"
            
            # Ghi tên image từ job build vào file .env để docker-compose đọc
            echo "IMAGE_TAG=${FULL_IMAGE_NAME}" > .env

            # Đăng nhập vào Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Kéo image mới nhất và khởi động lại dịch vụ
            docker-compose pull
            docker-compose up -d --remove-orphans
